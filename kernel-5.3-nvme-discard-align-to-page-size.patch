diff --git a/drivers/nvme/host/core.c b/drivers/nvme/host/core.c
index d3d6b7bd6903..1b2bb06fd3b5 100644
--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@ -559,10 +559,19 @@ static blk_status_t nvme_setup_discard(struct nvme_ns *ns, struct request *req,
 		struct nvme_command *cmnd)
 {
 	unsigned short segments = blk_rq_nr_discard_segments(req), n = 0;
+	unsigned short alloc_size = segments;
 	struct nvme_dsm_range *range;
 	struct bio *bio;
 
-	range = kmalloc_array(segments, sizeof(*range),
+	/*
+	 * Some SSDs requires address to be allined to page_size
+	 * Reference: https://bugzilla.kernel.org/show_bug.cgi?id=202665#c49
+	 */
+	if (ns->ctrl->quirks & NVME_QUIRK_DISCARD_ALIGN_TO_PAGE_SIZE) {
+		alloc_size = round_up(segments, PAGE_SIZE / sizeof(*range));
+	}
+
+	range = kmalloc_array(alloc_size, sizeof(*range),
 				GFP_ATOMIC | __GFP_NOWARN);
 	if (!range) {
 		/*
diff --git a/drivers/nvme/host/nvme.h b/drivers/nvme/host/nvme.h
index 2d678fb968c7..5abcd1bd6028 100644
--- a/drivers/nvme/host/nvme.h
+++ b/drivers/nvme/host/nvme.h
@@ -97,6 +97,10 @@ enum nvme_quirks {
 	 * Force simple suspend/resume path.
 	 */
 	NVME_QUIRK_SIMPLE_SUSPEND		= (1 << 10),
+        /*
+         * Discard command should be aligned to a PAGE_SIZE
+         */
+        NVME_QUIRK_DISCARD_ALIGN_TO_PAGE_SIZE   = (1 << 11),
 };
 
 /*
diff --git a/drivers/nvme/host/pci.c b/drivers/nvme/host/pci.c
index 732d5b63ec05..af3faa468682 100644
--- a/drivers/nvme/host/pci.c
+++ b/drivers/nvme/host/pci.c
@@ -3012,9 +3012,13 @@ static const struct pci_device_id nvme_id_table[] = {
 				NVME_QUIRK_DEALLOCATE_ZEROES, },
 	{ PCI_VDEVICE(INTEL, 0xf1a5),	/* Intel 600P/P3100 */
 		.driver_data = NVME_QUIRK_NO_DEEPEST_PS |
-				NVME_QUIRK_MEDIUM_PRIO_SQ },
+				NVME_QUIRK_MEDIUM_PRIO_SQ |
+				NVME_QUIRK_DISCARD_ALIGN_TO_PAGE_SIZE, },
 	{ PCI_VDEVICE(INTEL, 0xf1a6),	/* Intel 760p/Pro 7600p */
-		.driver_data = NVME_QUIRK_IGNORE_DEV_SUBNQN, },
+		.driver_data = NVME_QUIRK_IGNORE_DEV_SUBNQN |
+				NVME_QUIRK_DISCARD_ALIGN_TO_PAGE_SIZE, },
+	{ PCI_VDEVICE(INTEL, 0xf1a8),	/* Intel 660P */
+		.driver_data = NVME_QUIRK_DISCARD_ALIGN_TO_PAGE_SIZE },
 	{ PCI_VDEVICE(INTEL, 0x5845),	/* Qemu emulated controller */
 		.driver_data = NVME_QUIRK_IDENTIFY_CNS |
 				NVME_QUIRK_DISABLE_WRITE_ZEROES, },
@@ -3028,6 +3032,24 @@ static const struct pci_device_id nvme_id_table[] = {
 		.driver_data = NVME_QUIRK_DELAY_BEFORE_CHK_RDY, },
 	{ PCI_DEVICE(0x144d, 0xa821),   /* Samsung PM1725 */
 		.driver_data = NVME_QUIRK_DELAY_BEFORE_CHK_RDY, },
+	{ PCI_DEVICE(0x1987, 0x5016),   /* Phison E16 */
+		.driver_data = NVME_QUIRK_DISCARD_ALIGN_TO_PAGE_SIZE, },
+	{ PCI_DEVICE(0x1987, 0x5012),   /* Phison E12 */
+		.driver_data = NVME_QUIRK_DISCARD_ALIGN_TO_PAGE_SIZE, },
+	{ PCI_DEVICE(0x126f, 0x2265),   /* Silicon Motion SM2265 */
+		.driver_data = NVME_QUIRK_DISCARD_ALIGN_TO_PAGE_SIZE, },
+	{ PCI_DEVICE(0x126f, 0x2263),   /* Silicon Motion SM2263 */
+		.driver_data = NVME_QUIRK_DISCARD_ALIGN_TO_PAGE_SIZE, },
+	{ PCI_DEVICE(0x126f, 0x2262),   /* Silicon Motion SM2262 */
+		.driver_data = NVME_QUIRK_DISCARD_ALIGN_TO_PAGE_SIZE, },
+	{ PCI_DEVICE(0x126f, 0x2260),   /* Silicon Motion SM2260 */
+		.driver_data = NVME_QUIRK_DISCARD_ALIGN_TO_PAGE_SIZE, },
+	{ PCI_DEVICE(0xc0a9, 0x2263),   /* Crucial P1 (SM2263) */
+		.driver_data = NVME_QUIRK_DISCARD_ALIGN_TO_PAGE_SIZE, },
+	{ PCI_DEVICE(0x1cc1, 0x8201),   /* ADATA SX8200PNP (SM2262EN) */
+		.driver_data = NVME_QUIRK_DISCARD_ALIGN_TO_PAGE_SIZE |
+						NVME_QUIRK_NO_DEEPEST_PS |
+						NVME_QUIRK_IGNORE_DEV_SUBNQN, },
 	{ PCI_DEVICE(0x144d, 0xa822),   /* Samsung PM1725a */
 		.driver_data = NVME_QUIRK_DELAY_BEFORE_CHK_RDY, },
 	{ PCI_DEVICE(0x1d1d, 0x1f1f),	/* LighNVM qemu device */
